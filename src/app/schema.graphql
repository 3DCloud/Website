type Client {
  authorized: Boolean!
  createdAt: ISO8601DateTime!
  devices: [Device!]!
  id: ID!
  name: String
  printers: [Printer!]!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated return type of CreateUploadFileRequest
"""
type CreateUploadFileRequestPayload {
  headers: JSON!
  signedId: String!
  url: String!
}

"""
Autogenerated return type of DeleteClientMutation
"""
type DeleteClientMutationPayload {
  deleteCount: Int!
}

"""
Autogenerated return type of DeletePrinterMutation
"""
type DeletePrinterMutationPayload {
  deleteCount: Int!
}

type Device {
  client: Client!
  clientId: ID!
  createdAt: ISO8601DateTime!
  deviceName: String!
  hardwareIdentifier: String!
  id: ID!
  isPortableHardwareIdentifier: Boolean!
  lastSeen: ISO8601DateTime!
  printer: Printer
  updatedAt: ISO8601DateTime!
}

type GCodeSettings {
  cancelGCode: String
  createdAt: ISO8601DateTime!
  endGCode: String
  id: ID!
  startGCode: String
  updatedAt: ISO8601DateTime!
}

input GCodeSettingsInput {
  cancelGCode: String
  endGCode: String
  id: ID
  startGCode: String
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Represents untyped JSON
"""
scalar JSON

type Material {
  brand: String!
  colors: [MaterialColor!]!
  createdAt: ISO8601DateTime!
  emptySpoolWeight: Float!
  filamentDiameter: Float!
  id: ID!
  name: String!
  netFilamentWeight: Float!
  updatedAt: ISO8601DateTime!
}

type MaterialColor {
  color: String!
  id: ID!
  name: String!
}

type Mutation {
  cancelCurrentPrint(id: ID!): Printer
  createPrinter(deviceId: ID!, name: String!, printerDefinitionId: ID!): Printer
  createPrinterDefinition(printerDefinition: PrinterDefinitionInput!): PrinterDefinition
  createUploadFileRequest(byteSize: Int!, checksum: String!, contentType: String!, filename: String!): CreateUploadFileRequestPayload
  deleteClient(id: ID!): DeleteClientMutationPayload
  deletePrinter(id: ID!): DeletePrinterMutationPayload
  deletePrinterDefinition(id: ID!): PrinterDefinition
  deleteUploadedFile(id: ID!): UploadedFile
  generateWebSocketTicket: WebSocketTicket
  grantClientAuthorization(id: ID!): Client
  reassignPrinter(deviceId: ID!, printerId: ID!): Printer
  reconnectPrinter(id: ID!): Printer
  recordFileUploaded(signedId: String!): UploadedFile
  revokeClientAuthorization(id: ID!): Client
  setClientName(id: ID!, name: String): Client
  startPrint(fileId: ID!, printerId: ID!): Print
  updatePrinterDefinition(id: ID!, printerDefinition: PrinterDefinitionInput!): PrinterDefinition
}

type Print {
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  id: ID!
  printer: Printer!
  startedAt: ISO8601DateTime
  status: String!
  updatedAt: ISO8601DateTime!
  uploadedFile: UploadedFile!
}

type Printer {
  createdAt: ISO8601DateTime!
  currentPrint: Print
  currentPrintId: ID
  device: Device
  deviceId: ID
  gCodeSettings: GCodeSettings
  id: ID!
  name: String!
  printerDefinition: PrinterDefinition!
  printerDefinitionId: ID!
  state: String!
  ultiGCodeSettings: [UltiGCodeSettings!]!
  updatedAt: ISO8601DateTime!
}

type PrinterDefinition {
  createdAt: ISO8601DateTime!
  driver: String!
  extruderCount: Int!
  gCodeSettings: GCodeSettings
  id: ID!
  name: String!
  ultiGCodeSettings: [UltiGCodeSettings!]!
  updatedAt: ISO8601DateTime!
}

input PrinterDefinitionInput {
  extruderCount: Int!
  gCodeSettings: GCodeSettingsInput
  name: String!
  ultiGCodeSettings: [UltiGCodeSettingsInput!]
}

type Query {
  client(id: ID!): Client
  clients: [Client!]!
  currentUser: User!
  device(id: ID!): Device
  devices: [Device!]!
  getFileDownloadUrl(id: ID!): String!
  materials: [Material!]!
  print(id: ID!): Print
  printer(id: ID!): Printer
  printerDefinition(id: ID!): PrinterDefinition
  printerDefinitions: [PrinterDefinition!]!
  printers: [Printer!]!
  prints: [Print!]!
  uploadedFile(id: ID!): UploadedFile
  uploadedFiles(before: ISO8601DateTime): [UploadedFile!]!
}

type UltiGCodeSettings {
  buildPlateTemperature: Int!
  createdAt: ISO8601DateTime!
  endOfPrintRetractionLength: Float!
  fanSpeed: Int!
  flowRate: Int!
  hotendTemperature: Int!
  id: ID!
  material: Material!
  materialId: ID!
  printerDefinition: PrinterDefinition!
  printerDefinitionId: ID!
  retractionLength: Float!
  retractionSpeed: Float!
  updatedAt: ISO8601DateTime!
}

input UltiGCodeSettingsInput {
  buildPlateTemperature: Int!
  endOfPrintRetractionLength: Float!
  fanSpeed: Int!
  flowRate: Int!
  hotendTemperature: Int!
  id: ID
  materialId: ID!
  printerDefinitionId: ID!
  retractionLength: Float!
  retractionSpeed: Float!
}

type UploadedFile {
  byteSize: Int
  checksum: String
  contentType: String
  createdAt: ISO8601DateTime!
  estimatedDuration: Int
  filename: String!
  id: ID!
  url: String
  user: User!
}

type User {
  createdAt: ISO8601DateTime!
  emailAddress: String!
  name: String!
  updatedAt: ISO8601DateTime!
  username: String!
}

type WebSocketTicket {
  ticket: String!
  user: User!
}
