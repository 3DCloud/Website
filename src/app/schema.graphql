type ActiveStorageAttachment {
  byteSize: Int!
  checksum: String!
  contentType: String!
  url: String!
}

type Client {
  authorized: Boolean!
  createdAt: ISO8601DateTime!
  devices: [Device!]!
  id: ID!
  name: String
  printers: [Printer!]!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated return type of CreateUploadFileRequest
"""
type CreateUploadFileRequestPayload {
  headers: JSON!
  signedId: String!
  url: String!
}

type Device {
  client: Client!
  clientId: ID!
  createdAt: ISO8601DateTime!
  id: ID!
  lastSeen: ISO8601DateTime!
  name: String!
  path: String!
  printer: Printer
  serialNumber: String
  updatedAt: ISO8601DateTime!
}

type GCodeSettings {
  cancelGCode: String
  createdAt: ISO8601DateTime!
  endGCode: String
  id: ID!
  startGCode: String
  updatedAt: ISO8601DateTime!
}

input GCodeSettingsInput {
  cancelGCode: String
  endGCode: String
  id: ID
  startGCode: String
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Represents untyped JSON
"""
scalar JSON

type Material {
  brand: String!
  createdAt: ISO8601DateTime!
  emptySpoolWeight: Float!
  id: ID!
  materialColors: [MaterialColor!]!
  name: String!
  netFilamentWeight: Float!
  updatedAt: ISO8601DateTime!
}

type MaterialColor {
  color: String!
  id: ID!
  material: Material!
  name: String!
}

input MaterialColorInput {
  color: String!
  id: ID
  name: String!
}

input MaterialInput {
  brand: String!
  emptySpoolWeight: Int!
  materialColors: [MaterialColorInput!]!
  name: String!
  netFilamentWeight: Int!
}

type Mutation {
  cancelCurrentPrint(id: ID!): Print
  changeMaterial(extruderIndex: Int!, materialColorId: ID!, printerId: ID!, weight: Int): PrinterExtruder
  createMaterial(material: MaterialInput!): Material
  createPrinter(deviceId: ID!, name: String!, printerDefinitionId: ID!): Printer
  createPrinterDefinition(printerDefinition: PrinterDefinitionInput!): PrinterDefinition
  createUploadFileRequest(byteSize: Int!, checksum: String!, contentType: String!, filename: String!, publiclyAccessible: Boolean): CreateUploadFileRequestPayload
  deleteClient(id: ID!): Client
  deleteMaterial(id: ID!): Material
  deletePrinter(id: ID!): Printer
  deletePrinterDefinition(id: ID!): PrinterDefinition
  deleteUploadedFile(id: ID!): UploadedFile
  generateWebSocketTicket: WebSocketTicket
  grantClientAuthorization(id: ID!): Client
  reassignPrinter(deviceId: ID!, printerId: ID!): Printer
  reconnectPrinter(id: ID!): Printer
  recordFileUploaded(signedId: String!): UploadedFile
  revokeClientAuthorization(id: ID!): Client
  setClientName(id: ID!, name: String): Client
  startPrint(fileId: ID!, printerId: ID!): Print
  updateMaterial(id: ID!, material: MaterialInput!): Material
  updatePrinter(id: ID!, printer: PrinterInput!): Printer
  updatePrinterDefinition(id: ID!, printerDefinition: PrinterDefinitionInput!): PrinterDefinition
}

type NozzleSettings {
  hotendTemperature: Int!
  retractionLength: Float!
  retractionSpeed: Float!
}

input NozzleSettingsInput {
  hotendTemperature: Int!
  retractionLength: Float!
  retractionSpeed: Float!
}

type PerNozzleSettings {
  size025: NozzleSettings!
  size040: NozzleSettings!
  size060: NozzleSettings!
  size080: NozzleSettings!
  size100: NozzleSettings!
}

input PerNozzleSettingsInput {
  size025: NozzleSettingsInput!
  size040: NozzleSettingsInput!
  size060: NozzleSettingsInput!
  size080: NozzleSettingsInput!
  size100: NozzleSettingsInput!
}

type Print {
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  id: ID!
  printer: Printer!
  startedAt: ISO8601DateTime
  status: String!
  updatedAt: ISO8601DateTime!
  uploadedFile: UploadedFile!
}

type Printer {
  createdAt: ISO8601DateTime!
  currentPrint: Print
  currentPrintId: ID
  device: Device
  deviceId: ID
  gCodeSettings: GCodeSettings
  id: ID!
  name: String!
  printerDefinition: PrinterDefinition!
  printerDefinitionId: ID!
  printerExtruders: [PrinterExtruder]!
  state: String!
  ultiGCodeSettings: [UltiGCodeSettings]!
  updatedAt: ISO8601DateTime!
}

type PrinterDefinition {
  createdAt: ISO8601DateTime!
  driver: String!
  extruderCount: Int!
  filamentDiameter: Float!
  gCodeSettings: GCodeSettings
  id: ID!
  materials: [Material!]!
  name: String!
  thumbnail: ActiveStorageAttachment
  ultiGCodeSettings: [UltiGCodeSettings!]!
  updatedAt: ISO8601DateTime!
}

input PrinterDefinitionInput {
  extruderCount: Int!
  filamentDiameter: Float!
  gCodeSettings: GCodeSettingsInput
  name: String!
  thumbnailSignedId: String
  ultiGCodeSettings: [UltiGCodeSettingsInput!]
}

type PrinterExtruder {
  createdAt: ISO8601DateTime!
  extruderIndex: Int!
  id: ID!
  materialColor: MaterialColor
  materialColorId: ID
  printer: Printer!
  printerId: ID!
  ultiGCodeNozzleSize: String
  updatedAt: ISO8601DateTime!
}

input PrinterExtruderInput {
  extruderIndex: Int!
  ultiGCodeNozzleSize: String
}

input PrinterInput {
  printerExtruders: [PrinterExtruderInput!]!
}

type Query {
  client(id: ID!): Client
  clients: [Client!]!
  currentAbility: [Rule!]!
  currentUser: User
  device(id: ID!): Device
  devices: [Device!]!
  getFileDownloadUrl(id: ID!): String!
  material(id: ID!): Material
  materialColors: [MaterialColor!]!
  materials: [Material!]!
  print(id: ID!): Print
  printer(id: ID!): Printer
  printerDefinition(id: ID!): PrinterDefinition
  printerDefinitions: [PrinterDefinition!]!
  printers(state: [String!]): [Printer!]!
  prints: [Print!]!
  uploadedFile(id: ID!): UploadedFile
  uploadedFiles(before: ISO8601DateTime): [UploadedFile!]!
}

type Rule {
  action: [String!]!
  conditions: JSON
  inverted: Boolean
  subject: [String!]!
}

type UltiGCodeSettings {
  buildPlateTemperature: Int!
  createdAt: ISO8601DateTime!
  endOfPrintRetractionLength: Float!
  fanSpeed: Int!
  flowRate: Int!
  id: ID!
  material: Material!
  materialId: ID!
  perNozzleSettings: PerNozzleSettings!
  printerDefinition: PrinterDefinition!
  printerDefinitionId: ID!
  updatedAt: ISO8601DateTime!
}

input UltiGCodeSettingsInput {
  buildPlateTemperature: Int!
  endOfPrintRetractionLength: Float!
  fanSpeed: Int!
  flowRate: Int!
  id: ID
  materialId: ID!
  perNozzleSettings: PerNozzleSettingsInput!
  printerDefinitionId: ID
}

type UploadedFile {
  byteSize: Int
  checksum: String
  contentType: String
  createdAt: ISO8601DateTime!
  estimatedDuration: Int
  filename: String!
  id: ID!
  url: String
  user: User!
  userId: ID!
}

type User {
  avatar: ActiveStorageAttachment!
  createdAt: ISO8601DateTime!
  emailAddress: String!
  name: String!
  updatedAt: ISO8601DateTime!
  username: String!
}

type WebSocketTicket {
  ticket: String!
  user: User!
}
